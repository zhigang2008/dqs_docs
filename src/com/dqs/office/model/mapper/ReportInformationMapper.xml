<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="ReportInformation">

	<resultMap id="RM.ReportInformation" type="com.dqs.office.model.ReportInformation">
        <result property="id" column="ID"/>
        <result property="typeId" column="TYPE_ID"/>
        <result property="reportTitle" column="REPORT_TITLE"/>
        <result property="reporterId" column="REPORTER_ID"/>
        <result property="reportTime" column="REPORT_TIME"/>
        <result property="status" column="STATUS"/>
        <result property="backNote" column="BACK_NOTE"/>
        <result property="reportFile" column="REPORT_FILE"/>
        <result property="content" column="CONTENT"/>
        <result property="isPublic" column="IS_PUBLIC"/>
        <association property="reportInformationType" column="TYPE_ID" select="ReportInformationType.getById"></association>
        <association property="reportInformationStatus" column="STATUS" select="ReportInformationStatus.getById"></association>
        <association property="reporter" column="REPORTER_ID" select="User.getById"></association>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="ReportInformation.columns">
	    <![CDATA[
		ID,TYPE_ID,REPORT_TITLE,REPORTER_ID,REPORT_TIME,STATUS,BACK_NOTE,REPORT_FILE,CONTENT,IS_PUBLIC
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="ReportInformation.insert" >
    <![CDATA[
        INSERT INTO T_REPORT_INFORMATION (
        	ID ,
        	TYPE_ID ,
        	REPORT_TITLE ,
        	REPORTER_ID ,
        	REPORT_TIME ,
        	STATUS ,
        	BACK_NOTE ,
        	REPORT_FILE ,
        	CONTENT ,
        	IS_PUBLIC 
        ) VALUES (
        	#{id,jdbcType=DECIMAL} ,
        	#{typeId,jdbcType=DECIMAL} ,
        	#{reportTitle,jdbcType=VARCHAR} ,
        	#{reporterId,jdbcType=DECIMAL} ,
        	#{reportTime,jdbcType=TIMESTAMP} ,
        	#{status,jdbcType=DECIMAL} ,
        	#{backNote,jdbcType=VARCHAR} ,
        	#{reportFile,jdbcType=VARCHAR} ,
        	#{content,jdbcType=CLOB} ,
        	#{isPublic,jdbcType=BIT} 
        )
    ]]>
		<!--oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL -->
			
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="id">
			SELECT S_T_REPORT_INFORMATION.nextval  FROM DUAL 
        </selectKey>
	</insert>
    
	<update id="ReportInformation.update" >
    <![CDATA[
        UPDATE T_REPORT_INFORMATION SET
	        TYPE_ID = #{typeId,jdbcType=DECIMAL} ,
	        REPORT_TITLE = #{reportTitle,jdbcType=VARCHAR} ,
	        REPORTER_ID = #{reporterId,jdbcType=DECIMAL} ,
	        REPORT_TIME = #{reportTime,jdbcType=TIMESTAMP} ,
	        STATUS = #{status,jdbcType=DECIMAL} ,
	        BACK_NOTE = #{backNote,jdbcType=VARCHAR} ,
	        REPORT_FILE = #{reportFile,jdbcType=VARCHAR} ,
	        CONTENT = #{content,jdbcType=CLOB} ,
	        IS_PUBLIC = #{isPublic,jdbcType=BIT} 
        WHERE 
	        ID = #{id} 
    ]]>
	</update>

    <delete id="ReportInformation.delete">
    <![CDATA[
        DELETE FROM T_REPORT_INFORMATION WHERE
        ID = #{id} 
    ]]>
    </delete>
    
    <select id="ReportInformation.getById" resultMap="RM.ReportInformation">
		SELECT <include refid="ReportInformation.columns" />
	    <![CDATA[
		    FROM T_REPORT_INFORMATION 
	        WHERE 
		        ID = #{id} 
	    ]]>
	</select>
	<!-- 不建议,仅提供给数据量较少的基表查询 -->
	 <select id="ReportInformation.findAll" resultMap="RM.ReportInformation">
		SELECT <include refid="ReportInformation.columns" />
	    <![CDATA[
		    FROM T_REPORT_INFORMATION 
	    ]]>
	</select>
	<!-- 基础代码,视情况添加状态识别 -->
	 <select id="ReportInformation.baseCode" resultMap="RM.ReportInformation">
		SELECT <include refid="ReportInformation.columns" />
	    <![CDATA[
		    FROM T_REPORT_INFORMATION 
	    ]]>
	    <!-- 视情况添加where条件 -->
	</select>
	
	<sql id="ReportInformation.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(typeId)">
				AND TYPE_ID = #{typeId}
			</if>
	       <if test="@Ognl@isNotEmpty(reportTitle)">
				AND REPORT_TITLE = #{reportTitle}
			</if>
	       <if test="@Ognl@isNotEmpty(reporterId)">
				AND REPORTER_ID = #{reporterId}
			</if>
	       <if test="@Ognl@isNotEmpty(reportTimeBegin)">
				AND REPORT_TIME >= #{reportTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(reportTimeEnd)">
				AND REPORT_TIME &lt;= #{reportTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND STATUS = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(backNote)">
				AND BACK_NOTE = #{backNote}
			</if>
	       <if test="@Ognl@isNotEmpty(reportFile)">
				AND REPORT_FILE = #{reportFile}
			</if>
	       <if test="@Ognl@isNotEmpty(content)">
				AND CONTENT = #{content}
			</if>
	       <if test="@Ognl@isNotEmpty(isPublic)">
				AND IS_PUBLIC = #{isPublic}
			</if>
		</where>
	</sql>
		
    <select id="ReportInformation.findPage.count" resultType="long">
        SELECT count(*) FROM T_REPORT_INFORMATION 
		<include refid="ReportInformation.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="ReportInformation.findPage" resultMap="RM.ReportInformation">
    	SELECT <include refid="ReportInformation.columns" />
	    FROM T_REPORT_INFORMATION 
		<include refid="ReportInformation.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

