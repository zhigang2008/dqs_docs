<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="PublishInformation">

	<resultMap id="RM.PublishInformation" type="com.dqs.office.model.PublishInformation">
        <result property="id" column="ID"/>
        <result property="typeId" column="TYPE_ID"/>
        <result property="title" column="TITLE"/>
        <result property="content" column="CONTENT"/>
        <result property="author" column="AUTHOR"/>
        <result property="department" column="DEPARTMENT"/>
        <result property="publisherId" column="PUBLISHER_ID"/>
        <result property="publishTime" column="PUBLISH_TIME"/>
        <result property="viewHits" column="VIEW_HITS"/>
        <association property="publishInformationType" column="TYPE_ID" select="PublishInformationType.getById"></association>
        <association property="publisher" column="PUBLISHER_ID" select="User.getById"></association>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="PublishInformation.columns">
	    <![CDATA[
		ID,TYPE_ID,TITLE,CONTENT,AUTHOR,DEPARTMENT,PUBLISHER_ID,PUBLISH_TIME,VIEW_HITS
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="PublishInformation.insert" >
    <![CDATA[
        INSERT INTO T_PUBLISH_INFORMATION (
        	ID ,
        	TYPE_ID ,
        	TITLE ,
        	CONTENT ,
        	AUTHOR ,
        	DEPARTMENT ,
        	PUBLISHER_ID ,
        	PUBLISH_TIME ,
        	VIEW_HITS 
        ) VALUES (
        	#{id,jdbcType=DECIMAL} ,
        	#{typeId,jdbcType=DECIMAL} ,
        	#{title,jdbcType=VARCHAR} ,
        	#{content,jdbcType=CLOB} ,
        	#{author,jdbcType=VARCHAR} ,
        	#{department,jdbcType=VARCHAR} ,
        	#{publisherId,jdbcType=DECIMAL} ,
        	#{publishTime,jdbcType=TIMESTAMP} ,
        	#{viewHits,jdbcType=DECIMAL} 
        )
    ]]>
		<!--oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL -->
			
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="id">
			SELECT S_T_PUBLISH_INFORMATION.nextval  FROM DUAL 
        </selectKey>
	</insert>
    
	<update id="PublishInformation.update" >
    <![CDATA[
        UPDATE T_PUBLISH_INFORMATION SET
	        TYPE_ID = #{typeId,jdbcType=DECIMAL} ,
	        TITLE = #{title,jdbcType=VARCHAR} ,
	        CONTENT = #{content,jdbcType=CLOB} ,
	        AUTHOR = #{author,jdbcType=VARCHAR} ,
	        DEPARTMENT = #{department,jdbcType=VARCHAR} ,
	        PUBLISHER_ID = #{publisherId,jdbcType=DECIMAL} ,
	        PUBLISH_TIME = #{publishTime,jdbcType=TIMESTAMP} ,
	        VIEW_HITS = #{viewHits,jdbcType=DECIMAL} 
        WHERE 
	        ID = #{id} 
    ]]>
	</update>

    <delete id="PublishInformation.delete">
    <![CDATA[
        DELETE FROM T_PUBLISH_INFORMATION WHERE
        ID = #{id} 
    ]]>
    </delete>
    
    <select id="PublishInformation.getById" resultMap="RM.PublishInformation">
		SELECT <include refid="PublishInformation.columns" />
	    <![CDATA[
		    FROM T_PUBLISH_INFORMATION 
	        WHERE 
		        ID = #{id} 
	    ]]>
	</select>
	<!-- 不建议,仅提供给数据量较少的基表查询 -->
	 <select id="PublishInformation.findAll" resultMap="RM.PublishInformation">
		SELECT <include refid="PublishInformation.columns" />
	    <![CDATA[
		    FROM T_PUBLISH_INFORMATION 
	    ]]>
	</select>
	<!-- 基础代码,视情况添加状态识别 -->
	 <select id="PublishInformation.baseCode" resultMap="RM.PublishInformation">
		SELECT <include refid="PublishInformation.columns" />
	    <![CDATA[
		    FROM T_PUBLISH_INFORMATION 
	    ]]>
	    <!-- 视情况添加where条件 -->
	</select>
	
	<sql id="PublishInformation.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND ID = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(typeId)">
				AND TYPE_ID = #{typeId}
			</if>
	       <if test="@Ognl@isNotEmpty(title)">
				AND TITLE like '%'||#{title}||'%'
			</if>
	       <if test="@Ognl@isNotEmpty(author)">
				AND AUTHOR = #{author}
			</if>
	       <if test="@Ognl@isNotEmpty(department)">
				AND DEPARTMENT like '%'||#{department}||'%'
			</if>
	       <if test="@Ognl@isNotEmpty(publisherId)">
				AND PUBLISHER_ID = #{publisherId}
			</if>
	       <if test="@Ognl@isNotEmpty(publishTimeBegin)">
				AND PUBLISH_TIME >= #{publishTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(publishTimeEnd)">
				AND PUBLISH_TIME &lt;= #{publishTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(viewHits)">
				AND VIEW_HITS = #{viewHits}
			</if>
		</where>
	</sql>
		
    <select id="PublishInformation.findPage.count" resultType="long">
        SELECT count(*) FROM T_PUBLISH_INFORMATION 
		<include refid="PublishInformation.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="PublishInformation.findPage" resultMap="RM.PublishInformation">
    	SELECT <include refid="PublishInformation.columns" />
	    FROM T_PUBLISH_INFORMATION 
		<include refid="PublishInformation.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

